// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: connection_manager.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NuzurConnectionManager_GetUserConnections_FullMethodName   = "/NuzurConnectionManager/GetUserConnections"
	NuzurConnectionManager_ClearUserConnections_FullMethodName = "/NuzurConnectionManager/ClearUserConnections"
	NuzurConnectionManager_TestConnection_FullMethodName       = "/NuzurConnectionManager/TestConnection"
	NuzurConnectionManager_ExecuteQuery_FullMethodName         = "/NuzurConnectionManager/ExecuteQuery"
	NuzurConnectionManager_GetQueryExecution_FullMethodName    = "/NuzurConnectionManager/GetQueryExecution"
	NuzurConnectionManager_CancelQueryExecution_FullMethodName = "/NuzurConnectionManager/CancelQueryExecution"
	NuzurConnectionManager_StartChangesDiff_FullMethodName     = "/NuzurConnectionManager/StartChangesDiff"
	NuzurConnectionManager_GetChangesDiff_FullMethodName       = "/NuzurConnectionManager/GetChangesDiff"
	NuzurConnectionManager_CancelChangesDiff_FullMethodName    = "/NuzurConnectionManager/CancelChangesDiff"
)

// NuzurConnectionManagerClient is the client API for NuzurConnectionManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NuzurConnectionManagerClient interface {
	// connections
	GetUserConnections(ctx context.Context, in *GetUserConnectionsRequest, opts ...grpc.CallOption) (*GetUserConnectionsResponse, error)
	ClearUserConnections(ctx context.Context, in *ClearUserConnectionsRequest, opts ...grpc.CallOption) (*ClearUserConnectionsResponse, error)
	TestConnection(ctx context.Context, in *TestConnectionRequest, opts ...grpc.CallOption) (*TestConnectionResponse, error)
	// query executions
	ExecuteQuery(ctx context.Context, in *ExecuteQueryRequest, opts ...grpc.CallOption) (*ExecuteQueryResponse, error)
	GetQueryExecution(ctx context.Context, in *GetQueryExecutionRequest, opts ...grpc.CallOption) (*GetQueryExecutionResponse, error)
	CancelQueryExecution(ctx context.Context, in *CancelQueryExecutionRequest, opts ...grpc.CallOption) (*CancelQueryExecutionResponse, error)
	// diff changes
	StartChangesDiff(ctx context.Context, in *StartChangesDiffRequest, opts ...grpc.CallOption) (*StartChangesDiffResponse, error)
	GetChangesDiff(ctx context.Context, in *GetChangesDiffRequest, opts ...grpc.CallOption) (*GetChangesDiffResponse, error)
	CancelChangesDiff(ctx context.Context, in *CancelChangesDiffRequest, opts ...grpc.CallOption) (*CancelChangesDiffResponse, error)
}

type nuzurConnectionManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewNuzurConnectionManagerClient(cc grpc.ClientConnInterface) NuzurConnectionManagerClient {
	return &nuzurConnectionManagerClient{cc}
}

func (c *nuzurConnectionManagerClient) GetUserConnections(ctx context.Context, in *GetUserConnectionsRequest, opts ...grpc.CallOption) (*GetUserConnectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserConnectionsResponse)
	err := c.cc.Invoke(ctx, NuzurConnectionManager_GetUserConnections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurConnectionManagerClient) ClearUserConnections(ctx context.Context, in *ClearUserConnectionsRequest, opts ...grpc.CallOption) (*ClearUserConnectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClearUserConnectionsResponse)
	err := c.cc.Invoke(ctx, NuzurConnectionManager_ClearUserConnections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurConnectionManagerClient) TestConnection(ctx context.Context, in *TestConnectionRequest, opts ...grpc.CallOption) (*TestConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestConnectionResponse)
	err := c.cc.Invoke(ctx, NuzurConnectionManager_TestConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurConnectionManagerClient) ExecuteQuery(ctx context.Context, in *ExecuteQueryRequest, opts ...grpc.CallOption) (*ExecuteQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteQueryResponse)
	err := c.cc.Invoke(ctx, NuzurConnectionManager_ExecuteQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurConnectionManagerClient) GetQueryExecution(ctx context.Context, in *GetQueryExecutionRequest, opts ...grpc.CallOption) (*GetQueryExecutionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQueryExecutionResponse)
	err := c.cc.Invoke(ctx, NuzurConnectionManager_GetQueryExecution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurConnectionManagerClient) CancelQueryExecution(ctx context.Context, in *CancelQueryExecutionRequest, opts ...grpc.CallOption) (*CancelQueryExecutionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelQueryExecutionResponse)
	err := c.cc.Invoke(ctx, NuzurConnectionManager_CancelQueryExecution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurConnectionManagerClient) StartChangesDiff(ctx context.Context, in *StartChangesDiffRequest, opts ...grpc.CallOption) (*StartChangesDiffResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartChangesDiffResponse)
	err := c.cc.Invoke(ctx, NuzurConnectionManager_StartChangesDiff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurConnectionManagerClient) GetChangesDiff(ctx context.Context, in *GetChangesDiffRequest, opts ...grpc.CallOption) (*GetChangesDiffResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChangesDiffResponse)
	err := c.cc.Invoke(ctx, NuzurConnectionManager_GetChangesDiff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurConnectionManagerClient) CancelChangesDiff(ctx context.Context, in *CancelChangesDiffRequest, opts ...grpc.CallOption) (*CancelChangesDiffResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelChangesDiffResponse)
	err := c.cc.Invoke(ctx, NuzurConnectionManager_CancelChangesDiff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NuzurConnectionManagerServer is the server API for NuzurConnectionManager service.
// All implementations must embed UnimplementedNuzurConnectionManagerServer
// for forward compatibility.
type NuzurConnectionManagerServer interface {
	// connections
	GetUserConnections(context.Context, *GetUserConnectionsRequest) (*GetUserConnectionsResponse, error)
	ClearUserConnections(context.Context, *ClearUserConnectionsRequest) (*ClearUserConnectionsResponse, error)
	TestConnection(context.Context, *TestConnectionRequest) (*TestConnectionResponse, error)
	// query executions
	ExecuteQuery(context.Context, *ExecuteQueryRequest) (*ExecuteQueryResponse, error)
	GetQueryExecution(context.Context, *GetQueryExecutionRequest) (*GetQueryExecutionResponse, error)
	CancelQueryExecution(context.Context, *CancelQueryExecutionRequest) (*CancelQueryExecutionResponse, error)
	// diff changes
	StartChangesDiff(context.Context, *StartChangesDiffRequest) (*StartChangesDiffResponse, error)
	GetChangesDiff(context.Context, *GetChangesDiffRequest) (*GetChangesDiffResponse, error)
	CancelChangesDiff(context.Context, *CancelChangesDiffRequest) (*CancelChangesDiffResponse, error)
	mustEmbedUnimplementedNuzurConnectionManagerServer()
}

// UnimplementedNuzurConnectionManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNuzurConnectionManagerServer struct{}

func (UnimplementedNuzurConnectionManagerServer) GetUserConnections(context.Context, *GetUserConnectionsRequest) (*GetUserConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserConnections not implemented")
}
func (UnimplementedNuzurConnectionManagerServer) ClearUserConnections(context.Context, *ClearUserConnectionsRequest) (*ClearUserConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearUserConnections not implemented")
}
func (UnimplementedNuzurConnectionManagerServer) TestConnection(context.Context, *TestConnectionRequest) (*TestConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestConnection not implemented")
}
func (UnimplementedNuzurConnectionManagerServer) ExecuteQuery(context.Context, *ExecuteQueryRequest) (*ExecuteQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteQuery not implemented")
}
func (UnimplementedNuzurConnectionManagerServer) GetQueryExecution(context.Context, *GetQueryExecutionRequest) (*GetQueryExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueryExecution not implemented")
}
func (UnimplementedNuzurConnectionManagerServer) CancelQueryExecution(context.Context, *CancelQueryExecutionRequest) (*CancelQueryExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelQueryExecution not implemented")
}
func (UnimplementedNuzurConnectionManagerServer) StartChangesDiff(context.Context, *StartChangesDiffRequest) (*StartChangesDiffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartChangesDiff not implemented")
}
func (UnimplementedNuzurConnectionManagerServer) GetChangesDiff(context.Context, *GetChangesDiffRequest) (*GetChangesDiffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChangesDiff not implemented")
}
func (UnimplementedNuzurConnectionManagerServer) CancelChangesDiff(context.Context, *CancelChangesDiffRequest) (*CancelChangesDiffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelChangesDiff not implemented")
}
func (UnimplementedNuzurConnectionManagerServer) mustEmbedUnimplementedNuzurConnectionManagerServer() {
}
func (UnimplementedNuzurConnectionManagerServer) testEmbeddedByValue() {}

// UnsafeNuzurConnectionManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NuzurConnectionManagerServer will
// result in compilation errors.
type UnsafeNuzurConnectionManagerServer interface {
	mustEmbedUnimplementedNuzurConnectionManagerServer()
}

func RegisterNuzurConnectionManagerServer(s grpc.ServiceRegistrar, srv NuzurConnectionManagerServer) {
	// If the following call pancis, it indicates UnimplementedNuzurConnectionManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NuzurConnectionManager_ServiceDesc, srv)
}

func _NuzurConnectionManager_GetUserConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurConnectionManagerServer).GetUserConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurConnectionManager_GetUserConnections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurConnectionManagerServer).GetUserConnections(ctx, req.(*GetUserConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurConnectionManager_ClearUserConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearUserConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurConnectionManagerServer).ClearUserConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurConnectionManager_ClearUserConnections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurConnectionManagerServer).ClearUserConnections(ctx, req.(*ClearUserConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurConnectionManager_TestConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurConnectionManagerServer).TestConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurConnectionManager_TestConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurConnectionManagerServer).TestConnection(ctx, req.(*TestConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurConnectionManager_ExecuteQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurConnectionManagerServer).ExecuteQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurConnectionManager_ExecuteQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurConnectionManagerServer).ExecuteQuery(ctx, req.(*ExecuteQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurConnectionManager_GetQueryExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueryExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurConnectionManagerServer).GetQueryExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurConnectionManager_GetQueryExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurConnectionManagerServer).GetQueryExecution(ctx, req.(*GetQueryExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurConnectionManager_CancelQueryExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelQueryExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurConnectionManagerServer).CancelQueryExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurConnectionManager_CancelQueryExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurConnectionManagerServer).CancelQueryExecution(ctx, req.(*CancelQueryExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurConnectionManager_StartChangesDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartChangesDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurConnectionManagerServer).StartChangesDiff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurConnectionManager_StartChangesDiff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurConnectionManagerServer).StartChangesDiff(ctx, req.(*StartChangesDiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurConnectionManager_GetChangesDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChangesDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurConnectionManagerServer).GetChangesDiff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurConnectionManager_GetChangesDiff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurConnectionManagerServer).GetChangesDiff(ctx, req.(*GetChangesDiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurConnectionManager_CancelChangesDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelChangesDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurConnectionManagerServer).CancelChangesDiff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurConnectionManager_CancelChangesDiff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurConnectionManagerServer).CancelChangesDiff(ctx, req.(*CancelChangesDiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NuzurConnectionManager_ServiceDesc is the grpc.ServiceDesc for NuzurConnectionManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NuzurConnectionManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NuzurConnectionManager",
	HandlerType: (*NuzurConnectionManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserConnections",
			Handler:    _NuzurConnectionManager_GetUserConnections_Handler,
		},
		{
			MethodName: "ClearUserConnections",
			Handler:    _NuzurConnectionManager_ClearUserConnections_Handler,
		},
		{
			MethodName: "TestConnection",
			Handler:    _NuzurConnectionManager_TestConnection_Handler,
		},
		{
			MethodName: "ExecuteQuery",
			Handler:    _NuzurConnectionManager_ExecuteQuery_Handler,
		},
		{
			MethodName: "GetQueryExecution",
			Handler:    _NuzurConnectionManager_GetQueryExecution_Handler,
		},
		{
			MethodName: "CancelQueryExecution",
			Handler:    _NuzurConnectionManager_CancelQueryExecution_Handler,
		},
		{
			MethodName: "StartChangesDiff",
			Handler:    _NuzurConnectionManager_StartChangesDiff_Handler,
		},
		{
			MethodName: "GetChangesDiff",
			Handler:    _NuzurConnectionManager_GetChangesDiff_Handler,
		},
		{
			MethodName: "CancelChangesDiff",
			Handler:    _NuzurConnectionManager_CancelChangesDiff_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "connection_manager.proto",
}
