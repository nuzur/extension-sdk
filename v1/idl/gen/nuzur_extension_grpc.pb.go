// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: nuzur_extension.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NuzurExtension_GetMetadata_FullMethodName         = "/NuzurExtension/GetMetadata"
	NuzurExtension_StartExecution_FullMethodName      = "/NuzurExtension/StartExecution"
	NuzurExtension_SubmitExectuionStep_FullMethodName = "/NuzurExtension/SubmitExectuionStep"
	NuzurExtension_GetExecution_FullMethodName        = "/NuzurExtension/GetExecution"
)

// NuzurExtensionClient is the client API for NuzurExtension service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NuzurExtensionClient interface {
	GetMetadata(ctx context.Context, in *GetMetadataRequest, opts ...grpc.CallOption) (*GetMetadataResponse, error)
	StartExecution(ctx context.Context, in *StartExecutionRequest, opts ...grpc.CallOption) (*StartExecutionResponse, error)
	SubmitExectuionStep(ctx context.Context, in *SubmitExectuionStepRequest, opts ...grpc.CallOption) (*SubmitExectuionStepResponse, error)
	GetExecution(ctx context.Context, in *GetExecutionRequest, opts ...grpc.CallOption) (*GetExecutionResponse, error)
}

type nuzurExtensionClient struct {
	cc grpc.ClientConnInterface
}

func NewNuzurExtensionClient(cc grpc.ClientConnInterface) NuzurExtensionClient {
	return &nuzurExtensionClient{cc}
}

func (c *nuzurExtensionClient) GetMetadata(ctx context.Context, in *GetMetadataRequest, opts ...grpc.CallOption) (*GetMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMetadataResponse)
	err := c.cc.Invoke(ctx, NuzurExtension_GetMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurExtensionClient) StartExecution(ctx context.Context, in *StartExecutionRequest, opts ...grpc.CallOption) (*StartExecutionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartExecutionResponse)
	err := c.cc.Invoke(ctx, NuzurExtension_StartExecution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurExtensionClient) SubmitExectuionStep(ctx context.Context, in *SubmitExectuionStepRequest, opts ...grpc.CallOption) (*SubmitExectuionStepResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitExectuionStepResponse)
	err := c.cc.Invoke(ctx, NuzurExtension_SubmitExectuionStep_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nuzurExtensionClient) GetExecution(ctx context.Context, in *GetExecutionRequest, opts ...grpc.CallOption) (*GetExecutionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExecutionResponse)
	err := c.cc.Invoke(ctx, NuzurExtension_GetExecution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NuzurExtensionServer is the server API for NuzurExtension service.
// All implementations must embed UnimplementedNuzurExtensionServer
// for forward compatibility.
type NuzurExtensionServer interface {
	GetMetadata(context.Context, *GetMetadataRequest) (*GetMetadataResponse, error)
	StartExecution(context.Context, *StartExecutionRequest) (*StartExecutionResponse, error)
	SubmitExectuionStep(context.Context, *SubmitExectuionStepRequest) (*SubmitExectuionStepResponse, error)
	GetExecution(context.Context, *GetExecutionRequest) (*GetExecutionResponse, error)
	mustEmbedUnimplementedNuzurExtensionServer()
}

// UnimplementedNuzurExtensionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNuzurExtensionServer struct{}

func (UnimplementedNuzurExtensionServer) GetMetadata(context.Context, *GetMetadataRequest) (*GetMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (UnimplementedNuzurExtensionServer) StartExecution(context.Context, *StartExecutionRequest) (*StartExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartExecution not implemented")
}
func (UnimplementedNuzurExtensionServer) SubmitExectuionStep(context.Context, *SubmitExectuionStepRequest) (*SubmitExectuionStepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitExectuionStep not implemented")
}
func (UnimplementedNuzurExtensionServer) GetExecution(context.Context, *GetExecutionRequest) (*GetExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExecution not implemented")
}
func (UnimplementedNuzurExtensionServer) mustEmbedUnimplementedNuzurExtensionServer() {}
func (UnimplementedNuzurExtensionServer) testEmbeddedByValue()                        {}

// UnsafeNuzurExtensionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NuzurExtensionServer will
// result in compilation errors.
type UnsafeNuzurExtensionServer interface {
	mustEmbedUnimplementedNuzurExtensionServer()
}

func RegisterNuzurExtensionServer(s grpc.ServiceRegistrar, srv NuzurExtensionServer) {
	// If the following call pancis, it indicates UnimplementedNuzurExtensionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NuzurExtension_ServiceDesc, srv)
}

func _NuzurExtension_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurExtensionServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurExtension_GetMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurExtensionServer).GetMetadata(ctx, req.(*GetMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurExtension_StartExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurExtensionServer).StartExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurExtension_StartExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurExtensionServer).StartExecution(ctx, req.(*StartExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurExtension_SubmitExectuionStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitExectuionStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurExtensionServer).SubmitExectuionStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurExtension_SubmitExectuionStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurExtensionServer).SubmitExectuionStep(ctx, req.(*SubmitExectuionStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NuzurExtension_GetExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NuzurExtensionServer).GetExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NuzurExtension_GetExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NuzurExtensionServer).GetExecution(ctx, req.(*GetExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NuzurExtension_ServiceDesc is the grpc.ServiceDesc for NuzurExtension service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NuzurExtension_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NuzurExtension",
	HandlerType: (*NuzurExtensionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetadata",
			Handler:    _NuzurExtension_GetMetadata_Handler,
		},
		{
			MethodName: "StartExecution",
			Handler:    _NuzurExtension_StartExecution_Handler,
		},
		{
			MethodName: "SubmitExectuionStep",
			Handler:    _NuzurExtension_SubmitExectuionStep_Handler,
		},
		{
			MethodName: "GetExecution",
			Handler:    _NuzurExtension_GetExecution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nuzur_extension.proto",
}
